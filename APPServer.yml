Parameters:
  VPCId:
    Type: String
    Default: vpc-23242758
    Description: custom VPC
  SSHkeyname:
    Type: String 
    Default: assignmentCFN
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-04351e12" #Amazon Linux AMI 2017.03
    us-east-2:
      "AMALINUX" : "ami-1c002379" #Amazon Linux AMI 2017.03
    us-west-1:
      "AMALINUX" : "ami-14b89b74" #Amazon Linux AMI 2017.03
    us-west-2:
      "AMALINUX" : "ami-11120768" #Amazon Linux AMI 2017.03
    eu-west-2:
      "AMALINUX" : "ami-0a85946e" #Amazon Linux AMI 2017.03
    eu-west-1:
      "AMALINUX" : "ami-13f7226a" #Amazon Linux AMI 2017.03
    ap-northeast-2:
      "AMALINUX" : "ami-7ee13b10" #Amazon Linux AMI 2017.03
    ap-northeast-1:
      "AMALINUX" : "ami-21815747" #Amazon Linux AMI 2017.03
    ca-central-1:
      "AMALINUX" : "ami-32bb0556" #Amazon Linux AMI 2017.03
    ap-southeast-1:
      "AMALINUX" : "ami-1926ab7a" #Amazon Linux AMI 2017.03
    ap-southeast-2:
      "AMALINUX" : "ami-42e9f921" #Amazon Linux AMI 2017.03
    eu-central-1:
      "AMALINUX" : "ami-0460cb6b" #Amazon Linux AMI 2017.03   
  InstanceSize:
    SMALL:
      "EC2" : "t2.micro"
    MEDIUM:
      "EC2" : "t2.small"
    LARGE:  
      "EC2" : "t2.medium"
Resources:
  EC2:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
#   CreationPolicy:
#     ResourceSignal:
#       Count: 1
#       Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap,!Ref "AWS::Region","AMALINUX"] 
      InstanceType: !FindInMap [InstanceSize,!Ref EnvironmentSize, EC2]
      KeyName: !Ref SSHkeyname
      SecurityGroupIds: 
        - !Ref SecurityGroup 
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -ex
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets tdagent --region ${AWS::Region}
            yum -y update
           # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2 --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          tdagent:
            - "configure_cfn"
            - "remove_ntp"
            - "install_chrony"
            - "system_config"
            - "install_td-agent"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets tdagent --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub | 
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"  
        remove_ntp:
          commands:
            remove_ntp_packages:
              command: "yum -y remove ntp*"
        install_chrony:
          packages:
            yum:
              chrony: []
          services:
            sysvinit:
              chronyd:
                enabled: "true"
                ensureRunning: "true"
        system_config:
          commands:
            01_increase_max_file_descriport:
              cwd: "/etc/security"
              command: "echo -e 'root soft nofile 65536\nroot hard nofile 65536\n* soft nofile 65536\n* hard nofile 65536' >> limits.conf"
            02_optimize_network_kernel_parameters:
              cwd: "/etc"
              command: "echo -e 'net.core.somaxconn = 1024\n
                        net.core.netdev_max_backlog = 5000\n
                        net.core.rmem_max = 16777216\n
                        net.core.wmem_max = 16777216\n
                        net.ipv4.tcp_wmem = 4096 12582912 16777216\n
                        net.ipv4.tcp_rmem = 4096 12582912 16777216\n
                        net.ipv4.tcp_max_syn_backlog = 8096\n
                        net.ipv4.tcp_slow_start_after_idle = 0\n
                        net.ipv4.tcp_tw_reuse = 1\n
                        net.ipv4.ip_local_port_range = 10240 65535' >> sysctl.conf"
            03_active_02_change:
              cwd: "/etc"
              command: "sysctl -p"
            04_apply_change_01:
              cwd: "/etc/pam.d"
              command: "echo 'session required pam_limits.so' >> common-session "
        install_td-agent:
          commands:
            01_install:
              command: "curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh"
            02_start_service:
              command: "/etc/init.d/td-agent start"
            03_set_runningreboot:
              command: "chkconfig td-agent on"  
             chronyd:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Only Open SSH port"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"
Outputs:
  assignmentEC2:
    Description: Access URL for assignmentEC2
    Value: !Join ["",["EC2 Public IpAddress:",!GetAtt EC2.PublicIp]]
